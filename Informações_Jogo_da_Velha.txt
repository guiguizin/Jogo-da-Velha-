Extensões Utilizadas:
"Live Server" - Atualiza o JS automaticamente 
"Dracula Theme" - Tema 
"Prettier" - Formata o código automaticamente quando salva 



Atalhos para maior produtividade:
(!+Tab) - Gera toda a estrutura do arquivo HTML
(link + Tab) -> ./styles.css - Para importar arquivo CSS
(botão direito + index.html) -> Abrir com Live Server - Para abrir a página no navegador 
(.cell*9 + Tab) - Irá criar todas as 9 divs que serão usadas no jogo
(.winning-message + Tab) - O VS irá criar uma div com a classe "winning-message" para fazer a mensagem que irá aparecer caso o jogador vença
(p + Tab) - Cria parágrafo
(Button + Tab) - Cria botão, no caso utilizei para "Reiniciar a Partida" 
(Alt + selecionar as linhas) - Escrever um comando para todas as linhas selecionadas sem precisar fazê-lo manualmente.



Comandos: 
--------HTML
".board" - Classe (conteiner) que irá guardar todas as células do jogo da velha (9 células dentro do board).

"data-cel" na linha 12 - Atributo customizado para a div, manipulando dinamicamente com js

Na linha 23 -> colocar "data-winning-message" - Manipular esta div pois vai precisar mostrar a mensagem caso alguém vença e que não apareça durante a partida.

--------CSS
"box-sizing: border-box" - Para o MARGIN e PADDING não influenciarem na largura dos elementos. 

"margin: 0; padding: 0;" - 0 para tirar margin e padding de todos os elementos.

"height: 100vh; width: 100vw;" - Para o body ocupar 100% da altura e largura da tela.

"justify-content: center;" - Para centralizar todo o conteúdo no centro da tela.

"align-content: center;" - Centralizar todo o conteúdo no centro e verticalmente.

"justify-items: center; align-items: center;" - Vão centralizar o conteúdo das e as células no centro.

".cell:nth-child(1)" -  Remover as bordas da primeira fileira (border-top: none;)

"cursor: not-allowed" - Função de mostrar clique não eprmitido no cursor 

--------JS
"endGame" - Responsável por mostrar tela de empate ou vitória.

Infos: 
**CSS Grid (usado p Jogo da Velha)- O CSS Grid é um sistema de estruturação de layout que o CSS fornece. 
Diferente do Flexbox, que apenas nos permite trabalhar em uma única dimensão, o CSS Grid nos permite configurar layouts em duas dimensões (linhas e colunas). 
A junção de linhas e colunas formam uma grade, o que dá o nome a esse sistema (Grid).

**Classe para CSS e atributos para selecionar elementos no JS.

** O asterisco na linha 1 do CSS irá selecionar todos os elementos HTML da página.

**100px é o tamanho da célula



Botões:
Reiniciar 

<<<<<<< HEAD
HTML

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="./styles.css">
    <title>Jogo da Velha - Yasmin :)</title>
</head>
<body>  
   Hello Galerinha, espero que gostem! <div class="board x" data-board>
      <div class="cell" data-cel></div>
      <div class="cell" data-cel></div>
      <div class="cell" data-cel></div>
      <div class="cell" data-cel></div>
      <div class="cell" data-cel></div>
      <div class="cell" data-cel></div>
      <div class="cell" data-cel></div>
      <div class="cell" data-cel></div>
      <div class="cell" data-cel></div> 
   </div> 

     <div class="winning-message" data-winning-message>
       <p class= "winning-message-text" data-winning-message-text>X Venceu!!</p>  
       <button class= "winning-message-button" data-restart-button>Reiniciar a Partida</button>
     </div>
   <script src="./scripts.js"></script>
</body>
</html>





CSS
* {
     box-sizing: border-box;   
     margin: 0;
     padding: 0;
}

/* Definindo as cores de fundo */
body {
    height: 100vh;
    width: 100vw;
    background: linear-gradient(
        90deg,
         rgba(119,21,218,1)0%,
         rgba(56,56,249,1)100%
         );
}

.board{
    display: grid;
    width: 100%;
    height: 100%;
    display: grid;
    justify-content: center;
    align-content: center;
    justify-items: center;
    align-items: center;
    grid-template-columns: repeat(3,auto);
}

.board.x .cell:not(.x):not(.circle):hover::after,
.board.x .cell:not(.x):not(.circle):hover::before,
.board.circle .cell:not(.x):not(.circle):hover::after,
.board.x .cell:not(.x):not(.circle):hover::before {
    background: rgba(255,255,255, 0.3) !important;
}

/* Células - tirando as bordas */
.cell {
    width: 100px;
    height: 100px;
    border: 2px solid white;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
}

/* Função de mostrar clique não permitido no cursor */
.cell.x, 
.cell.circle{
   cursor: not-allowed;
}
/* Retiras as bordas das células */
.cell:nth-child(1),
.cell:nth-child(2),
.cell:nth-child(3)  {
 border-top: none;
}

.cell:nth-child(1),
.cell:nth-child(4),
.cell:nth-child(7)  {
 border-left: none;
}

.cell:nth-child(7),
.cell:nth-child(8),
.cell:nth-child(9)  {
 border-bottom: none;
}

.cell:nth-child(3),
.cell:nth-child(6),
.cell:nth-child(9)  {
 border-right: none;
}

/* X */ 
.cell.x::before,
.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::after,
.board.x .cell:not(.x):not(.circle):hover::before {
   content: ""; 
   height: calc(100px * 0.10);
   width: calc(100px * 0.9);
   background:white;
   position: absolute;
}

.cell.x::before
.board.x .cell:not(.x):not(.circle):hover::before {
    transform: rotate(45deg);
}

.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::after {
    transform: rotate(-45deg);
}

/* Circle*/ 
.cell.circle::before,
.cell.circle::after,
.board.circle .cell:not(.x):not(.circle):hover::after,
.board.circle .cell:not(.x):not(.circle):hover::after  {
   content: ""; 
   height: calc(100px * 0.9);
   width: calc(100px * 0.9);
   background:white;
   position: absolute;
   border-radius: 50%;
}

/* Mensagem de Vitória do Jogador */ 
.winning-message {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    justify-content: center;
    align-items: center;
    background-color: rgba(0,0,0,0.8);
    flex-direction: column;
}

.winning-message button {
    font-size: 2.5rem;
    background-color: rgba(119,21,218,1);
    padding: 10px 15px;
    cursor: pointer;
    border-radius: 5px;
    border: none;
    margin-top: 16px;
    color: white;
}

.winning-message-button:hover {
    color: rgba(119,21,218,1);
    background-color: white;
}

.winning-message-text {
    color: white;
    font-size: 5rem;
}





JS
/* Selecionar todas as divs (células) - All*/ 
const cellElements = document.querySelectorAll("[data-cell]");
const board = document.querySelector("[data-board]");
const winningMessageTextElement = document.querySelector(
    "[data-winning-message-text]"
);
const winningMessage = document.querySelector("[data-winning-message]");
const restartButton = document.querySelector(
    "[data-restart-button]"
    );

let isCircleTurn;

/* combinacoes de vitoria */
const winningCombinations = {
    (0,1,2),  //horizontal//
    (3,4,5),  //horizontal//
    (6,7,8),  //horizontal//
    (0,3,6),      //vertical//
    (1,4,7),      //vertical//
    (2,5,8),      //vertical//
    (0,4,8),          //diagonal//
    (2,4,6),          //diagonal//

};

const startGame = () => {
    isCircleTurn = false; //vez do x//

   for (const cell of cellElements) {
       cell.classList.remove("circle");  //limpa tudo ao clicar no botão de reiniciar//
       cell.classList.remove("x");
       cell.removeEventListener("click", handleClick)  //reseta a aplicação//
      cell.addEventListener("click", handleClick, {once: true});
    }   

    setBoardHoverClass()
    winningMessage.classList.remove("show-winning-message");
};

const endGame = (isDraw) => {   //verifica empate//
      if (isDraw) {      
        winningMessageTextElement.innerText = "Empate!!"
      } else {
          winningMessageTextElement.innerText = isCircleTurn 
          ? 'O Venceu' 
          : 'X Venceu!';
      }

      winningMessage.classList.add("show-winning-message");
};


const CheckForWin = (CurrentPlayer) => {
      return winningCombinations.some(combination => {   //verificando se alguma combinação está preenchida com o CurrentPlayer//
           return combination.every((index) => {      //todas as combinações//
               return cellElements[index].classList.contains(currentPlayer);
           });
      });
};

const CheckForDraw =() => {   //Checa se todas as células estão ocupadas - Empate//
     return [...cellElements].every(cell => {
       return cell.classList.contains("x") || cell.classList.contains("circle");
     })
}

const placeMark = (cell, classToAdd) => {
    cell.classList.add(classToAdd);
};

const setBoardHoverClass = () => {
    board.classList.remove("circle");
    board.classList.remove("x");

    if (isCircleTurn) {
        board.classList.add("circle"); //se for a vez do circulo, adicionar o circulo//
     } else {
         board.classList.add("x");

    }
}

const swapTurns = () => {
    isCircleTurn = !isCircleTurn;  // vez do circulo//

    setBoardHoverClass();
};


const handleClick = (e) => {
    // Colocar a marca (X ou Circulo)
    const cell = e.target;
    const classToAdd = isCircleTurn ? "circle" : "x";

   placeMark(cell,classToAdd);

    // Verificar por Vitoria 
     const isWin = CheckForWin(classToAdd);

     // Verificar por empate 
     const isDraw = CheckForDraw();
     if (isWin) {
         endGame(false) ;
     } else if (isDraw) {
         endGame(true);
     } else {
       // Mudar o simbolo
       swapTurns(); //mudar o turno// 
     } 
};   

startGame();

restartButton.addEventListener("click", startGame);
                
=======

>>>>>>> ea67b6f773b56c4a03882de96e58b10178485fa2
